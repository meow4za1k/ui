local ZyncLib = {}

function ZyncLib:Create(title, iconId)
    local lib = {}
    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    local Player = Players.LocalPlayer
    
    local colors = {
        background = Color3.fromRGB(10, 10, 10),
        purple = Color3.fromRGB(200, 176, 255),
        white = Color3.fromRGB(255, 255, 255),
        gray = Color3.fromRGB(150, 150, 150),
        separator = Color3.fromRGB(40, 40, 40)
    }
    
    local sounds = {
        hover = "rbxassetid://6333178510",
        click = "rbxassetid://6333641236",
        toggle = "rbxassetid://6333641464",
        startup = "rbxassetid://6031094677",
        minimize = "rbxassetid://6333712037"
    }
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "Zync.pmo"
    ScreenGui.ResetOnSpawn = false
    
    pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(ScreenGui)
            ScreenGui.Parent = game:GetService("CoreGui")
        elseif gethui then
            ScreenGui.Parent = gethui()
        else
            ScreenGui.Parent = game:GetService("CoreGui")
        end
    end)
    
    if not ScreenGui.Parent then
        ScreenGui.Parent = Player:WaitForChild("PlayerGui")
    end
    
    local function createSound(id, volume)
        local sound = Instance.new("Sound")
        sound.SoundId = id
        sound.Volume = volume or 0.5
        sound.Parent = ScreenGui
        return sound
    end
    
    local hoverSound = createSound(sounds.hover, 0.15)
    local clickSound = createSound(sounds.click, 0.2)
    local toggleSound = createSound(sounds.toggle, 0.3)
    local startupSound = createSound(sounds.startup, 0.4)
    local minimizeSound = createSound(sounds.minimize, 0.3)
    
    local Background = Instance.new("Frame")
    Background.Name = "Background"
    Background.Size = UDim2.new(0, 250, 0, 100) -- Initial small size, will auto-scale
    Background.Position = UDim2.new(0.02, 0, 0.3, 0)
    Background.BackgroundColor3 = colors.background
    Background.BackgroundTransparency = 1
    Background.BorderSizePixel = 0
    Background.ClipsDescendants = true
    Background.Parent = ScreenGui
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 2)
    UICorner.Parent = Background
    
    local OuterGlow = Instance.new("ImageLabel")
    OuterGlow.Name = "OuterGlow"
    OuterGlow.BackgroundTransparency = 1
    OuterGlow.Image = "rbxassetid://5028857084"
    OuterGlow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    OuterGlow.ImageTransparency = 0.6
    OuterGlow.Size = UDim2.new(1, 30, 1, 30)
    OuterGlow.Position = UDim2.new(0, -15, 0, -15)
    OuterGlow.ZIndex = -1
    OuterGlow.Parent = Background
    
    local TitleContainer = Instance.new("Frame")
    TitleContainer.Name = "TitleContainer"
    TitleContainer.Size = UDim2.new(1, 0, 0, 25)
    TitleContainer.BackgroundTransparency = 1
    TitleContainer.Parent = Background
    
    local ZyncLabel = Instance.new("TextLabel")
    ZyncLabel.Name = "ZyncLabel"
    ZyncLabel.Position = UDim2.new(0, 10, 0, 5)
    ZyncLabel.Size = UDim2.new(0, 40, 0, 20)
    ZyncLabel.BackgroundTransparency = 1
    ZyncLabel.Font = Enum.Font.RobotoMono
    ZyncLabel.TextSize = 14
    ZyncLabel.Text = "Zync"
    ZyncLabel.TextColor3 = colors.white
    ZyncLabel.TextXAlignment = Enum.TextXAlignment.Left
    ZyncLabel.TextTransparency = 1
    ZyncLabel.Parent = TitleContainer
    
    local PmoLabel = Instance.new("TextLabel")
    PmoLabel.Name = "PmoLabel"
    PmoLabel.Position = UDim2.new(0, 40, 0, 5)
    PmoLabel.Size = UDim2.new(0, 40, 0, 20)
    PmoLabel.BackgroundTransparency = 1
    PmoLabel.Font = Enum.Font.RobotoMono
    PmoLabel.TextSize = 14
    PmoLabel.Text = ".pmo"
    PmoLabel.TextColor3 = colors.purple
    PmoLabel.TextXAlignment = Enum.TextXAlignment.Left
    PmoLabel.TextTransparency = 1
    PmoLabel.Parent = TitleContainer
    
    local Logo
    if iconId and tonumber(iconId) then
        Logo = Instance.new("ImageLabel")
        Logo.Name = "Logo"
        Logo.Size = UDim2.new(0, 20, 0, 20)
        Logo.Position = UDim2.new(1, -30, 0, 2)
        Logo.BackgroundTransparency = 1
        Logo.Image = "rbxassetid://" .. iconId
        Logo.ImageTransparency = 1
        Logo.Parent = TitleContainer
    end
    
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Size = UDim2.new(1, 0, 1, -25)
    ContentContainer.Position = UDim2.new(0, 0, 0, 25)
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.Parent = Background
    
    local function playSound(sound)
        pcall(function()
            if sound then 
                sound:Play()
            end
        end)
    end
    
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function updateDrag(input)
        if not dragging then return end
        local delta = input.Position - dragStart
        Background.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    Background.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Background.Position
            TweenService:Create(Background, TweenInfo.new(0.2), {
                BackgroundTransparency = 0.2,
                BackgroundColor3 = Color3.fromRGB(5, 5, 5)
            }):Play()
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    TweenService:Create(Background, TweenInfo.new(0.2), {
                        BackgroundTransparency = 0,
                        BackgroundColor3 = colors.background
                    }):Play()
                end
            end)
        end
    end)
    
    Background.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
    
    local visible = true
    local toggleConnection
    
    toggleConnection = UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.RightShift then
            visible = not visible
            if visible then
                playSound(toggleSound)
                Background.Visible = true
                TweenService:Create(Background, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                    BackgroundTransparency = 0
                }):Play()
                for _, child in pairs(Background:GetDescendants()) do
                    if child:IsA("TextLabel") then
                        TweenService:Create(child, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                            TextTransparency = 0
                        }):Play()
                    elseif child:IsA("ImageLabel") or child:IsA("ImageButton") then
                        TweenService:Create(child, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                            ImageTransparency = 0
                        }):Play()
                    end
                end
            else
                playSound(minimizeSound)
                local fadeTween = TweenService:Create(Background, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                    BackgroundTransparency = 1
                })
                fadeTween:Play()
                for _, child in pairs(Background:GetDescendants()) do
                    if child:IsA("TextLabel") then
                        TweenService:Create(child, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                            TextTransparency = 1
                        }):Play()
                    elseif child:IsA("ImageLabel") or child:IsA("ImageButton") then
                        TweenService:Create(child, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                            ImageTransparency = 1
                        }):Play()
                    end
                end
                fadeTween.Completed:Connect(function()
                    if not visible then
                        Background.Visible = false
                    end
                end)
            end
        end
    end)
    
    lib.sections = {}
    
    local function createSeparator(position, parent)
        local separator = Instance.new("Frame")
        separator.Name = "Separator"
        separator.Size = UDim2.new(1, -20, 0, 1)
        separator.Position = position
        separator.BackgroundColor3 = colors.separator
        separator.BorderSizePixel = 0
        separator.BackgroundTransparency = 1
        separator.Parent = parent or ContentContainer
        return separator
    end
    
    function lib:AddSection(name)
        local sectionIndex = #self.sections + 1
        local sectionData = {}
        local yPos = 5
        for _, section in pairs(self.sections) do
            if section.container.Visible then
                yPos = yPos + section.container.Size.Y.Offset
            else
                yPos = yPos + 25
            end
        end
        
        local sectionContainer = Instance.new("Frame")
        sectionContainer.Name = name .. "Section"
        sectionContainer.Size = UDim2.new(1, 0, 0, 25)
        sectionContainer.Position = UDim2.new(0, 0, 0, yPos)
        sectionContainer.BackgroundTransparency = 1
        sectionContainer.Parent = ContentContainer
        
        local header = Instance.new("TextButton")
        header.Name = "Header"
        header.Size = UDim2.new(1, 0, 0, 25)
        header.BackgroundTransparency = 1
        header.TextColor3 = colors.purple
        header.Font = Enum.Font.RobotoMono
        header.TextSize = 14
        header.Text = ">> " .. name
        header.TextTransparency = 1
        header.TextXAlignment = Enum.TextXAlignment.Left
        header.Position = UDim2.new(0, 10, 0, 0)
        header.Parent = sectionContainer
        
        local headerOrigSize = header.Size
        header.MouseEnter:Connect(function()
            playSound(hoverSound)
            TweenService:Create(header, TweenInfo.new(0.15), {
                Size = UDim2.new(headerOrigSize.X.Scale * 1.02, headerOrigSize.X.Offset * 1.02, 
                                  headerOrigSize.Y.Scale * 1.05, headerOrigSize.Y.Offset * 1.05),
                TextColor3 = Color3.fromRGB(220, 196, 255)
            }):Play()
        end)
        
        header.MouseLeave:Connect(function()
            TweenService:Create(header, TweenInfo.new(0.15), {
                Size = headerOrigSize,
                TextColor3 = colors.purple
            }):Play()
        end)
        
        header.MouseButton1Down:Connect(function()
            playSound(clickSound)
        end)
        
        local separator = createSeparator(UDim2.new(0, 10, 0, 25), sectionContainer)
        
        local itemsContainer = Instance.new("Frame")
        itemsContainer.Name = "Items"
        itemsContainer.Size = UDim2.new(1, 0, 0, 0)
        itemsContainer.Position = UDim2.new(0, 0, 0, 26)
        itemsContainer.BackgroundTransparency = 1
        itemsContainer.Visible = true
        itemsContainer.Parent = sectionContainer
        
        local expanded = true
        header.MouseButton1Click:Connect(function()
            expanded = not expanded
            if expanded then
                playSound(toggleSound)
                itemsContainer.Visible = true
                local numItems = #sectionData.items
                local targetSize = UDim2.new(1, 0, 0, numItems * 22)
                TweenService:Create(itemsContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                    Size = targetSize
                }):Play()
                
                local sectionTargetSize = UDim2.new(1, 0, 0, 26 + (numItems * 22))
                TweenService:Create(sectionContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                    Size = sectionTargetSize
                }):Play()
                
                header.Text = ">> " .. name
            else
                playSound(minimizeSound)
                TweenService:Create(sectionContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                    Size = UDim2.new(1, 0, 0, 25)
                }):Play()
                
                task.delay(0.3, function()
                    if not expanded then
                        itemsContainer.Visible = false
                    end
                end)
                
                header.Text = "> " .. name
            end
            
            task.spawn(function()
                self:UpdateSectionPositions(true)
            end)
        end)
        
        sectionData.items = {}
        sectionData.container = sectionContainer
        sectionData.itemsContainer = itemsContainer
        sectionData.expanded = expanded
        
        function sectionData:AddToggle(name, default)
            local toggle = Instance.new("Frame")
            toggle.Name = name:gsub("[^%w]", "") .. "Toggle"
            toggle.Size = UDim2.new(1, 0, 0, 22)
            toggle.Position = UDim2.new(0, 0, 0, #self.items * 22)
            toggle.BackgroundTransparency = 1
            toggle.Parent = self.itemsContainer
            
            local isOn = default or false
            
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Size = UDim2.new(1, -70, 1, 0)
            label.BackgroundTransparency = 1
            label.TextColor3 = colors.white
            label.Font = Enum.Font.RobotoMono
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Position = UDim2.new(0, 20, 0, 0)
            label.TextTransparency = 1
            
            -- Format for toggles
            local baseName
            if string.find(name, ">>") then
                baseName = name:gsub(">>.*$", "")
                label.Text = baseName
            else
                baseName = name
                label.Text = name
            end
            
            label.Parent = toggle
            
            -- Status text with color change
            local statusText = Instance.new("TextLabel")
            statusText.Name = "Status"
            statusText.Size = UDim2.new(0, 40, 1, 0)
            statusText.Position = UDim2.new(1, -50, 0, 0)
            statusText.BackgroundTransparency = 1
            statusText.Font = Enum.Font.RobotoMono
            statusText.TextSize = 14
            statusText.Text = isOn and "ON" or "OFF"
            statusText.TextColor3 = isOn and colors.purple or colors.white
            statusText.TextTransparency = 1
            statusText.Parent = toggle
            
            local toggleButton = Instance.new("TextButton")
            toggleButton.Name = "ToggleButton"
            toggleButton.Size = UDim2.new(1, 0, 1, 0)
            toggleButton.BackgroundTransparency = 1
            toggleButton.Text = ""
            toggleButton.ZIndex = 2
            toggleButton.Parent = toggle
            
            local toggleOrigSize = toggle.Size
            toggle.MouseEnter:Connect(function()
                playSound(hoverSound)
                TweenService:Create(toggle, TweenInfo.new(0.15), {
                    Size = UDim2.new(toggleOrigSize.X.Scale * 1.02, toggleOrigSize.X.Offset * 1.02, 
                                     toggleOrigSize.Y.Scale * 1.05, toggleOrigSize.Y.Offset * 1.05),
                    BackgroundTransparency = 0.9
                }):Play()
                TweenService:Create(label, TweenInfo.new(0.15), {
                    TextColor3 = Color3.fromRGB(220, 220, 220)
                }):Play()
            end)
            
            toggle.MouseLeave:Connect(function()
                TweenService:Create(toggle, TweenInfo.new(0.15), {
                    Size = toggleOrigSize,
                    BackgroundTransparency = 1
                }):Play()
                TweenService:Create(label, TweenInfo.new(0.15), {
                    TextColor3 = colors.white
                }):Play()
            end)
            
            toggleButton.MouseButton1Click:Connect(function()
                playSound(clickSound)
                isOn = not isOn
                playSound(toggleSound)
                
                -- Update status text
                statusText.Text = isOn and "ON" or "OFF"
                TweenService:Create(statusText, TweenInfo.new(0.2), {
                    TextColor3 = isOn and colors.purple or colors.white
                }):Play()
                
                if self.callback then
                    task.spawn(function()
                        self.callback(baseName, isOn)
                    end)
                end
            end)
            
            table.insert(self.items, toggle)
            
            local newSize = UDim2.new(1, 0, 0, #self.items * 22)
            TweenService:Create(self.itemsContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                Size = newSize
            }):Play()
            
            if self.expanded then
                local containerNewSize = UDim2.new(1, 0, 0, 26 + (#self.items * 22))
                TweenService:Create(self.container, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                    Size = containerNewSize
                }):Play()
            end
            
            task.spawn(function()
                lib:UpdateSectionPositions(true)
            end)
            
            return {
                SetState = function(state)
                    isOn = state
                    statusText.Text = isOn and "ON" or "OFF"
                    statusText.TextColor3 = isOn and colors.purple or colors.white
                    return isOn
                end,
                GetState = function()
                    return isOn
                end
            }
        end
        
        function sectionData:AddSelector(name, options, default)
            local selector = Instance.new("Frame")
            selector.Name = name:gsub("[^%w]", "") .. "Selector"
            selector.Size = UDim2.new(1, 0, 0, 22)
            selector.Position = UDim2.new(0, 0, 0, #self.items * 22)
            selector.BackgroundTransparency = 1
            selector.Parent = self.itemsContainer
            
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Size = UDim2.new(0.6, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.TextColor3 = colors.white
            label.Font = Enum.Font.RobotoMono
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Position = UDim2.new(0, 20, 0, 0)
            label.Text = name
            label.TextTransparency = 1
            label.Parent = selector
            
            local currentOption = default or options[1]
            
            local dropdownButton = Instance.new("TextButton")
            dropdownButton.Name = "DropdownButton"
            dropdownButton.Size = UDim2.new(0.4, -10, 0, 18)
            dropdownButton.Position = UDim2.new(0.6, 0, 0.5, -9)
            dropdownButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            dropdownButton.BorderSizePixel = 0
            dropdownButton.TextColor3 = colors.white
            dropdownButton.Font = Enum.Font.RobotoMono
            dropdownButton.TextSize = 12
            dropdownButton.Text = currentOption
            dropdownButton.TextTransparency = 1
            dropdownButton.Parent = selector
            
            local UICornerDropdown = Instance.new("UICorner")
            UICornerDropdown.CornerRadius = UDim.new(0, 2)
            UICornerDropdown.Parent = dropdownButton
            
            -- Creating a separate frame for dropdown that doesn't push other items
            local dropdownFrame = Instance.new("Frame")
            dropdownFrame.Name = "DropdownFrame"
            dropdownFrame.Size = UDim2.new(0.4, -10, 0, 0)
            dropdownFrame.Position = UDim2.new(0.6, 0, 1, 0)
            dropdownFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            dropdownFrame.BorderSizePixel = 0
            dropdownFrame.ZIndex = 10
            dropdownFrame.Visible = false
            dropdownFrame.Parent = selector
            
            local UICornerDropdownFrame = Instance.new("UICorner")
            UICornerDropdownFrame.CornerRadius = UDim.new(0, 2)
            UICornerDropdownFrame.Parent = dropdownFrame
            
            for i, option in ipairs(options) do
                local optionButton = Instance.new("TextButton")
                optionButton.Name = option .. "Option"
                optionButton.Size = UDim2.new(1, 0, 0, 18)
                optionButton.Position = UDim2.new(0, 0, 0, (i-1) * 18)
                optionButton.BackgroundTransparency = 1
                optionButton.TextColor3 = colors.white
                optionButton.Font = Enum.Font.RobotoMono
                optionButton.TextSize = 12
                optionButton.Text = option
                optionButton.ZIndex = 11
                optionButton.Parent = dropdownFrame
                
                optionButton.MouseEnter:Connect(function()
                    playSound(hoverSound)
                    TweenService:Create(optionButton, TweenInfo.new(0.1), {
                        BackgroundTransparency = 0.8,
                        BackgroundColor3 = colors.purple
                    }):Play()
                end)
                
                optionButton.MouseLeave:Connect(function()
                    TweenService:Create(optionButton, TweenInfo.new(0.1), {
                        BackgroundTransparency = 1
                    }):Play()
                end)
                
                optionButton.MouseButton1Click:Connect(function()
                    playSound(clickSound)
                    currentOption = option
                    dropdownButton.Text = option
                    
                    TweenService:Create(dropdownFrame, TweenInfo.new(0.2), {
                        Size = UDim2.new(0.4, -10, 0, 0)
                    }):Play()
                    
                    task.delay(0.2, function()
                        dropdownFrame.Visible = false
                    end)
                    
                    if self.callback then
                        task.spawn(function()
                            self.callback(name, currentOption)
                        end)
                    end
                end)
            end
            
            local dropdownVisible = false
            dropdownButton.MouseButton1Click:Connect(function()
                playSound(clickSound)
                dropdownVisible = not dropdownVisible
                
                if dropdownVisible then
                    dropdownFrame.Visible = true
                    dropdownFrame.Size = UDim2.new(0.4, -10, 0, 0)
                    
                    -- Position dropdown on top if there's not enough space below
                    local screenPos = selector.AbsolutePosition
                    local screenSize = selector.AbsoluteSize
                    local dropdownSize = #options * 18
                    
                    if screenPos.Y + screenSize.Y + dropdownSize > workspace.CurrentCamera.ViewportSize.Y then
                        dropdownFrame.Position = UDim2.new(0.6, 0, 0, -dropdownSize)
                    else
                        dropdownFrame.Position = UDim2.new(0.6, 0, 1, 0)
                    end
                    
                    TweenService:Create(dropdownFrame, TweenInfo.new(0.2), {
                        Size = UDim2.new(0.4, -10, 0, #options * 18)
                    }):Play()
                else
                    TweenService:Create(dropdownFrame, TweenInfo.new(0.2), {
                        Size = UDim2.new(0.4, -10, 0, 0)
                    }):Play()
                    
                    task.delay(0.2, function()
                        if not dropdownVisible then
                            dropdownFrame.Visible = false
                        end
                    end)
                end
            end)
            
            -- Close dropdown when clicking elsewhere
            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and dropdownVisible then
                    local mousePos = UserInputService:GetMouseLocation()
                    local dropdownPos = dropdownFrame.AbsolutePosition
                    local dropdownSize = dropdownFrame.AbsoluteSize
                    
                    if mousePos.X < dropdownPos.X or mousePos.X > dropdownPos.X + dropdownSize.X or
                       mousePos.Y < dropdownPos.Y or mousePos.Y > dropdownPos.Y + dropdownSize.Y then
                        if mousePos.X < dropdownButton.AbsolutePosition.X or mousePos.X > dropdownButton.AbsolutePosition.X + dropdownButton.AbsoluteSize.X or
                           mousePos.Y < dropdownButton.AbsolutePosition.Y or mousePos.Y > dropdownButton.AbsolutePosition.Y + dropdownButton.AbsoluteSize.Y then
                            dropdownVisible = false
                            TweenService:Create(dropdownFrame, TweenInfo.new(0.2), {
                                Size = UDim2.new(0.4, -10, 0, 0)
                            }):Play()
                            
                            task.delay(0.2, function()
                                if not dropdownVisible then
                                    dropdownFrame.Visible = false
                                end
                            end)
                        end
                    end
                end
            end)
            
            local selectorOrigSize = selector.Size
            selector.MouseEnter:Connect(function()
                playSound(hoverSound)
                TweenService:Create(selector, TweenInfo.new(0.15), {
                    Size = UDim2.new(selectorOrigSize.X.Scale * 1.02, selectorOrigSize.X.Offset * 1.02, 
                                     selectorOrigSize.Y.Scale * 1.05, selectorOrigSize.Y.Offset * 1.05),
                    BackgroundTransparency = 0.9
                }):Play()
                TweenService:Create(label, TweenInfo.new(0.15), {
                    TextColor3 = Color3.fromRGB(220, 220, 220)
                }):Play()
            end)
            
            selector.MouseLeave:Connect(function()
                TweenService:Create(selector, TweenInfo.new(0.15), {
                    Size = selectorOrigSize,
                    BackgroundTransparency = 1
                }):Play()
                TweenService:Create(label, TweenInfo.new(0.15), {
                    TextColor3 = colors.white
                }):Play()
            end)
            
            table.insert(self.items, selector)
            
            local newSize = UDim2.new(1, 0, 0, #self.items * 22)
            TweenService:Create(self.itemsContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                Size = newSize
            }):Play()
            
            if self.expanded then
                local containerNewSize = UDim2.new(1, 0, 0, 26 + (#self.items * 22))
                TweenService:Create(self.container, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                    Size = containerNewSize
                }):Play()
            end
            
            task.spawn(function()
                lib:UpdateSectionPositions(true)
            end)
            
            return {
                SetOption = function(option)
                    if table.find(options, option) then
                        currentOption = option
                        dropdownButton.Text = option
                        return true
                    end
                    return false
                end,
                GetOption = function()
                    return currentOption
                end
            }
        end
        
        function sectionData:AddButton(name, callback)
            local button = Instance.new("Frame")
            button.Name = name:gsub("[^%w]", "") .. "Button"
            button.Size = UDim2.new(1, 0, 0, 22)
            button.Position = UDim2.new(0, 0, 0, #self.items * 22)
            button.BackgroundTransparency = 1
            button.Parent = self.itemsContainer
            
            local buttonElement = Instance.new("TextButton")
            buttonElement.Name = "ButtonElement"
            buttonElement.Size = UDim2.new(0.8, 0, 0, 18)
            buttonElement.Position = UDim2.new(0.1, 0, 0.5, -9)
            buttonElement.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            buttonElement.BorderSizePixel = 0
            buttonElement.TextColor3 = colors.white
            buttonElement.Font = Enum.Font.RobotoMono
            buttonElement.TextSize = 14
            buttonElement.Text = name
            buttonElement.TextTransparency = 1
            buttonElement.Parent = button
            
            local UICornerButton = Instance.new("UICorner")
            UICornerButton.CornerRadius = UDim.new(0, 2)
            UICornerButton.Parent = buttonElement
            
            buttonElement.MouseEnter:Connect(function()
                playSound(hoverSound)
                TweenService:Create(buttonElement, TweenInfo.new(0.15), {
                    BackgroundColor3 = Color3.fromRGB(60, 60, 60),
                    TextColor3 = Color3.fromRGB(220, 220, 220)
                }):Play()
            end)
            
            buttonElement.MouseLeave:Connect(function()
                TweenService:Create(buttonElement, TweenInfo.new(0.15), {
                    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
                    TextColor3 = colors.white
                }):Play()
            end)
            
            buttonElement.MouseButton1Down:Connect(function()
                playSound(clickSound)
                TweenService:Create(buttonElement, TweenInfo.new(0.1), {
                    Size = UDim2.new(0.78, 0, 0, 17)
                }):Play()
            end)
            
            buttonElement.MouseButton1Up:Connect(function()
                TweenService:Create(buttonElement, TweenInfo.new(0.1), {
                    Size = UDim2.new(0.8, 0, 0, 18)
                }):Play()
            end)
            
            buttonElement.MouseButton1Click:Connect(function()
                if callback then
                    task.spawn(function()
                        callback()
                    end)
                end
            end)
            
            table.insert(self.items, button)
            
            local newSize = UDim2.new(1, 0, 0, #self.items * 22)
            TweenService:Create(self.itemsContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                Size = newSize
            }):Play()
            
            if self.expanded then
                local containerNewSize = UDim2.new(1, 0, 0, 26 + (#self.items * 22))
                TweenService:Create(self.container, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                    Size = containerNewSize
                }):Play()
            end
            
            task.spawn(function()
                lib:UpdateSectionPositions(true)
            end)
            
            return button
        end
        
        function sectionData:SetCallback(callback)
            self.callback = callback
        end
        
        table.insert(self.sections, sectionData)
        return sectionData
    end
    
    function lib:UpdateSectionPositions(animate)
        local yPos = 5
        local totalHeight = 5
        for i, section in ipairs(self.sections) do
            local targetPos = UDim2.new(0, 0, 0, yPos)
            if animate then
                TweenService:Create(section.container, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                    Position = targetPos
                }):Play()
            else
                section.container.Position = targetPos
            end
            local sectionHeight
            if section.expanded then
                sectionHeight = 26 + (#section.items * 22)
            else
                sectionHeight = 25
            end
            yPos = yPos + sectionHeight
            totalHeight = totalHeight + sectionHeight
        end
        
        -- Auto-scale UI based on content height
        local targetSize = UDim2.new(0, 250, 0, math.max(80, totalHeight + 30))
        if animate then
            TweenService:Create(Background, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
                Size = targetSize
            }):Play()
        else
            Background.Size = targetSize
        end
    end
    
    function lib:Show()
        playSound(startupSound)
        TweenService:Create(Background, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
            BackgroundTransparency = 0
        }):Play()
        TweenService:Create(ZyncLabel, TweenInfo.new(0.7, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
            TextTransparency = 0
        }):Play()
        TweenService:Create(PmoLabel, TweenInfo.new(0.7, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
            TextTransparency = 0
        }):Play()
        if Logo then
            TweenService:Create(Logo, TweenInfo.new(0.7, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                ImageTransparency = 0
            }):Play()
        end
        
        task.delay(0.3, function()
            for i, section in ipairs(lib.sections) do
                local header = section.container:FindFirstChild("Header")
                if header then
                    TweenService:Create(header, TweenInfo.new(0.4, Enum.EasingStyle.Quart), {
                        TextTransparency = 0
                    }):Play()
                end
                task.delay(0.1 * i, function()
                    for _, child in pairs(section.container:GetDescendants()) do
                        if child.Name == "Separator" then
                            TweenService:Create(child, TweenInfo.new(0.3), {
                                BackgroundTransparency = 0
                            }):Play()
                        end
                        if child:IsA("TextLabel") and child.Name ~= "Header" then
                            TweenService:Create(child, TweenInfo.new(0.3), {
                                TextTransparency = 0
                            }):Play()
                        end
                        if child:IsA("TextButton") and child:IsDescendantOf(section.itemsContainer) then
                            TweenService:Create(child, TweenInfo.new(0.3), {
                                TextTransparency = 0
                            }):Play()
                        end
                    end
                end)
            end
        end)
        
        self:UpdateSectionPositions(false)
    end
    
    function lib:Destroy()
        if toggleConnection then
            toggleConnection:Disconnect()
        end
        
        TweenService:Create(Background, TweenInfo.new(0.5), {
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 250, 0, 0)
        }):Play()
        
        task.delay(0.5, function()
            ScreenGui:Destroy()
        end)
    end
    
    return lib
end

return ZyncLib
