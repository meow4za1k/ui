--[[
    Zync.pmo UI Library
    
    A minimalist gaming menu UI system for Roblox
    
    Usage:
        local ZyncLib = require(path.to.ZyncLib)
        local menu = ZyncLib.new()
        
        -- Add tabs and options
        local aimingTab = menu:AddTab("Aiming")
        aimingTab:AddOption("Target", {values={"«Head»", "«Torso»"}, default="«Head»", keybind="F"})
        aimingTab:AddOption("Visible Check", {default="« OFF", keybind="G"})
        
        -- Initialize
        menu:Init()
]]

local ZyncLib = {}
ZyncLib.__index = ZyncLib

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- Constants
local TWEEN_SPEED = 0.2
local TWEEN_STYLE = Enum.EasingStyle.Quart
local TWEEN_DIRECTION = Enum.EasingDirection.Out
local HIGHLIGHT_COLOR = Color3.fromRGB(81, 81, 189)
local DEFAULT_TEXT_COLOR = Color3.fromRGB(255, 255, 255)
local UNSELECTED_COLOR = Color3.fromRGB(200, 200, 200)

-- Class for Tab objects
local Tab = {}
Tab.__index = Tab

function Tab.new(name, parent)
    local self = setmetatable({}, Tab)
    self.name = name
    self.parent = parent
    self.expanded = false
    self.options = {}
    return self
end

function Tab:AddOption(name, settings)
    settings = settings or {}
    local option = {
        name = name,
        keybind = settings.keybind or "X",
        value = settings.default or "« OFF",
        values = settings.values or {"« OFF", "« ON"}
    }
    table.insert(self.options, option)
    
    -- Update UI if already initialized
    if self.parent.initialized then
        self.parent:Render()
    end
    
    return option
end

-- Create a new menu instance
function ZyncLib.new(title)
    local self = setmetatable({}, ZyncLib)
    
    -- Properties
    self.title = title or "Zync.pmo"
    self.tabs = {}
    self.menuItems = {}
    self.selectedTab = 1
    self.selectedOption = 0
    self.menuEnabled = true
    self.minimized = false
    self.isDragging = false
    self.dragOffset = nil
    self.currentHeight = 200
    self.isKeybindOpen = false
    self.activeKeybind = nil
    self.initialized = false
    
    -- Common keybinds for dropdown
    self.commonKeybinds = {
        "F", "G", "H", "J", "K",
        "Z", "X", "C", "V", "B"
    }
    
    return self
end

-- Add a tab to the menu
function ZyncLib:AddTab(name)
    local tab = Tab.new(name, self)
    table.insert(self.tabs, tab)
    
    -- Update UI if already initialized
    if self.initialized then
        self:Render()
    end
    
    return tab
end

-- Initialize the UI
function ZyncLib:Init()
    local LocalPlayer = Players.LocalPlayer
    local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
    
    -- Create the ScreenGui with high ZIndex
    self.screenGui = Instance.new("ScreenGui")
    self.screenGui.Name = "ZyncMenuGui"
    self.screenGui.ResetOnSpawn = false
    self.screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.screenGui.DisplayOrder = 999
    self.screenGui.IgnoreGuiInset = true
    
    -- Determine parent based on environment
    if RunService:IsStudio() then
        self.screenGui.Parent = PlayerGui
    else
        self.screenGui.Parent = game.CoreGui
    end
    
    -- Create the shadow container
    self.glowContainer = Instance.new("Frame")
    self.glowContainer.Name = "GlowContainer"
    self.glowContainer.BackgroundTransparency = 1
    self.glowContainer.BorderSizePixel = 0
    self.glowContainer.Position = UDim2.new(0, 6, 0, 6)
    self.glowContainer.Size = UDim2.new(0, 208, 0, 208)
    self.glowContainer.ZIndex = 998
    self.glowContainer.Parent = self.screenGui
    
    -- Create multiple shadow layers
    for i = 1, 3 do
        local shadowLayer = Instance.new("Frame")
        shadowLayer.Name = "ShadowLayer_" .. i
        shadowLayer.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        shadowLayer.BorderSizePixel = 0
        shadowLayer.Position = UDim2.new(0, -i, 0, -i)
        shadowLayer.Size = UDim2.new(1, i*2, 1, i*2)
        shadowLayer.BackgroundTransparency = 0.7 + (i * 0.1)
        shadowLayer.ZIndex = 997 - i
        shadowLayer.Parent = self.glowContainer
    end
    
    -- Create the main frame
    self.mainFrame = Instance.new("Frame")
    self.mainFrame.Name = "MainFrame"
    self.mainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    self.mainFrame.BackgroundTransparency = 0.2
    self.mainFrame.BorderSizePixel = 0
    self.mainFrame.Position = UDim2.new(0, 10, 0, 10)
    self.mainFrame.Size = UDim2.new(0, 200, 0, 200)
    self.mainFrame.ZIndex = 999
    self.mainFrame.Parent = self.screenGui
    
    -- Create drag handle
    self.dragHandle = Instance.new("Frame")
    self.dragHandle.Name = "DragHandle"
    self.dragHandle.BackgroundTransparency = 1
    self.dragHandle.Position = UDim2.new(0, 0, 0, 0)
    self.dragHandle.Size = UDim2.new(1, 0, 0, 20)
    self.dragHandle.ZIndex = 1000
    self.dragHandle.Parent = self.mainFrame
    
    -- Create title
    self.titleLabel = Instance.new("TextLabel")
    self.titleLabel.Name = "TitleLabel"
    self.titleLabel.BackgroundTransparency = 1
    self.titleLabel.Position = UDim2.new(0, 5, 0, 5)
    self.titleLabel.Size = UDim2.new(1, -10, 0, 15)
    self.titleLabel.Font = Enum.Font.RobotoMono
    self.titleLabel.Text = self.title
    self.titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.titleLabel.TextSize = 14
    self.titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.titleLabel.ZIndex = 1000
    self.titleLabel.Parent = self.mainFrame
    
    -- Create separator
    self.separator = Instance.new("Frame")
    self.separator.Name = "Separator"
    self.separator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    self.separator.BorderSizePixel = 0
    self.separator.Position = UDim2.new(0, 5, 0, 20)
    self.separator.Size = UDim2.new(1, -10, 0, 1)
    self.separator.ZIndex = 1000
    self.separator.Parent = self.mainFrame
    
    -- Create menu container
    self.menuContainer = Instance.new("ScrollingFrame")
    self.menuContainer.Name = "MenuContainer"
    self.menuContainer.BackgroundTransparency = 1
    self.menuContainer.Position = UDim2.new(0, 5, 0, 25)
    self.menuContainer.Size = UDim2.new(1, -10, 1, -30)
    self.menuContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
    self.menuContainer.ScrollBarThickness = 0
    self.menuContainer.ScrollingDirection = Enum.ScrollingDirection.Y
    self.menuContainer.AutomaticCanvasSize = Enum.AutomaticSize.Y
    self.menuContainer.ZIndex = 1000
    self.menuContainer.Parent = self.mainFrame
    
    -- Create keybind dropdown (initially hidden)
    self.keybindDropdown = Instance.new("Frame")
    self.keybindDropdown.Name = "KeybindDropdown"
    self.keybindDropdown.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.keybindDropdown.BorderSizePixel = 0
    self.keybindDropdown.Position = UDim2.new(0, 0, 0, 0)
    self.keybindDropdown.Size = UDim2.new(0, 120, 0, 100)
    self.keybindDropdown.Visible = false
    self.keybindDropdown.ZIndex = 1100
    self.keybindDropdown.Parent = self.screenGui
    
    -- Set up input handling
    self:SetupInputHandling()
    
    -- Start shadow animation
    self:StartShadowAnimation()
    
    -- Make UI draggable
    self:MakeDraggable(self.dragHandle)
    
    -- Render the UI
    self:Render()
    
    -- Mark as initialized
    self.initialized = true
    
    -- Set first tab as expanded by default
    if #self.tabs > 0 then
        self.tabs[1].expanded = true
        self:Render()
    end
    
    print("Zync.pmo Menu has been loaded!")
    print("Controls:")
    print("- Home: Toggle menu visibility")
    print("- Up/Down arrows or Mouse wheel: Navigate")
    print("- Enter: Select option or toggle setting")
    print("- Right-click on option: Change keybind")
    print("- Drag from top bar: Move menu")
    print("- Double-click title: Minimize/maximize menu")
    
    return self
end

-- Animate frame resizing
function ZyncLib:AnimateResize(targetSize)
    local tweenInfo = TweenInfo.new(TWEEN_SPEED, TWEEN_STYLE, TWEEN_DIRECTION)
    local tween = TweenService:Create(self.mainFrame, tweenInfo, {Size = targetSize})
    tween:Play()
    
    -- Also resize the glow container
    local glowTargetSize = UDim2.new(0, targetSize.X.Offset + 8, 0, targetSize.Y.Offset + 8)
    local glowTween = TweenService:Create(self.glowContainer, tweenInfo, {Size = glowTargetSize})
    glowTween:Play()
    
    return tween
end

-- Animate UI element properties
function ZyncLib:AnimateProperty(instance, properties)
    local tweenInfo = TweenInfo.new(TWEEN_SPEED, TWEEN_STYLE, TWEEN_DIRECTION)
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Animate arrow rotation
function ZyncLib:AnimateArrowRotation(arrow, isExpanded)
    local targetRotation = isExpanded and 90 or 0
    local tweenInfo = TweenInfo.new(TWEEN_SPEED, TWEEN_STYLE, TWEEN_DIRECTION)
    local tween = TweenService:Create(arrow, tweenInfo, {Rotation = targetRotation})
    tween:Play()
    return tween
end

-- Populate keybind dropdown
function ZyncLib:PopulateKeybindDropdown(tabIndex, optionIndex, position)
    -- Clear existing items
    for _, child in pairs(self.keybindDropdown:GetChildren()) do
        child:Destroy()
    end
    
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    title.BorderSizePixel = 0
    title.Size = UDim2.new(1, 0, 0, 20)
    title.Font = Enum.Font.RobotoMono
    title.Text = "Select Keybind"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextSize = 14
    title.ZIndex = 1101
    title.Parent = self.keybindDropdown
    
    local listFrame = Instance.new("Frame")
    listFrame.Name = "ListFrame"
    listFrame.BackgroundTransparency = 1
    listFrame.Position = UDim2.new(0, 0, 0, 20)
    listFrame.Size = UDim2.new(1, 0, 1, -20)
    listFrame.ZIndex = 1101
    listFrame.Parent = self.keybindDropdown
    
    -- Add keybind options
    for i, key in ipairs(self.commonKeybinds) do
        local item = Instance.new("TextButton")
        item.Name = "Key_" .. key
        item.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        item.BorderSizePixel = 0
        item.Position = UDim2.new(0, 0, 0, (i-1) * 20)
        item.Size = UDim2.new(1, 0, 0, 20)
        item.Font = Enum.Font.RobotoMono
        item.Text = key
        item.TextColor3 = Color3.fromRGB(255, 255, 255)
        item.TextSize = 14
        item.ZIndex = 1101
        
        -- Highlight current keybind
        if self.tabs[tabIndex].options[optionIndex].keybind == key then
            item.BackgroundColor3 = HIGHLIGHT_COLOR
        end
        
        -- Set up click event
        local menuRef = self -- Create reference to menu for use in callback
        item.MouseButton1Click:Connect(function()
            -- Set the new keybind
            menuRef.tabs[tabIndex].options[optionIndex].keybind = key
            -- Close dropdown and update menu
            menuRef:CloseKeybindDropdown()
            menuRef:Render()
        end)
        
        item.Parent = listFrame
    end
    
    -- Position the dropdown near the option
    self.keybindDropdown.Position = position
    
    -- Adjust dropdown height based on number of options
    self.keybindDropdown.Size = UDim2.new(0, 120, 0, 20 + (#self.commonKeybinds * 20))
    
    -- Show the dropdown with animation
    self.keybindDropdown.BackgroundTransparency = 1
    self.keybindDropdown.Visible = true
    self:AnimateProperty(self.keybindDropdown, {BackgroundTransparency = 0})
    
    -- Set active keybind reference
    self.activeKeybind = {tabIndex = tabIndex, optionIndex = optionIndex}
    self.isKeybindOpen = true
end

-- Close keybind dropdown
function ZyncLib:CloseKeybindDropdown()
    if self.isKeybindOpen then
        self:AnimateProperty(self.keybindDropdown, {BackgroundTransparency = 1})
        local menuRef = self -- Create reference to menu for use in callback
        delay(TWEEN_SPEED, function()
            menuRef.keybindDropdown.Visible = false
        end)
        self.isKeybindOpen = false
        self.activeKeybind = nil
    end
end

-- Render the menu contents
function ZyncLib:Render()
    -- Close keybind dropdown if open
    if self.isKeybindOpen then
        self:CloseKeybindDropdown()
    end
    
    -- Clear existing items
    for _, child in pairs(self.menuContainer:GetChildren()) do
        child:Destroy()
    end
    
    -- Reset menu items table
    self.menuItems = {}
    
    -- Update main frame size if minimized
    if self.minimized then
        self:AnimateResize(UDim2.new(0, 200, 0, 25))
        self.menuContainer.Visible = false
        return
    else
        self.menuContainer.Visible = true
    end
    
    -- Create menu items
    local yOffset = 0
    
    for tabIndex, tab in ipairs(self.tabs) do
        -- Create tab header with animated arrow
        local tabFrame = Instance.new("Frame")
        tabFrame.Name = "TabFrame_" .. tabIndex
        tabFrame.BackgroundTransparency = 1
        tabFrame.Position = UDim2.new(0, 0, 0, yOffset)
        tabFrame.Size = UDim2.new(1, 0, 0, 20)
        tabFrame.ZIndex = 1001
        tabFrame.Parent = self.menuContainer
        
        local arrowContainer = Instance.new("Frame")
        arrowContainer.Name = "ArrowContainer"
        arrowContainer.BackgroundTransparency = 1
        arrowContainer.Size = UDim2.new(0, 20, 0, 20)
        arrowContainer.ZIndex = 1002
        arrowContainer.Parent = tabFrame
        
        local arrow = Instance.new("TextLabel")
        arrow.Name = "Arrow"
        arrow.BackgroundTransparency = 1
        arrow.Position = UDim2.new(0.5, 0, 0.5, 0)
        arrow.Size = UDim2.new(0, 20, 0, 20)
        arrow.AnchorPoint = Vector2.new(0.5, 0.5)
        arrow.Font = Enum.Font.RobotoMono
        arrow.Text = "►" -- Default right arrow (when closed)
        arrow.TextColor3 = tab.expanded and HIGHLIGHT_COLOR or DEFAULT_TEXT_COLOR
        arrow.TextSize = 14
        arrow.Rotation = tab.expanded and 90 or 0 -- Rotated when expanded (pointing down)
        arrow.ZIndex = 1003
        arrow.Parent = arrowContainer
        
        local tabHeader = Instance.new("TextLabel")
        tabHeader.Name = "Header"
        tabHeader.BackgroundTransparency = 1
        tabHeader.Position = UDim2.new(0, 20, 0, 0)
        tabHeader.Size = UDim2.new(1, -20, 1, 0)
        tabHeader.Font = Enum.Font.RobotoMono
        tabHeader.ZIndex = 1002
        
        -- Format tab header based on selection
        if self.selectedTab == tabIndex and self.selectedOption == 0 then
            tabHeader.Text = "_« " .. tab.name .. " _"
            tabHeader.TextColor3 = HIGHLIGHT_COLOR
            arrow.TextColor3 = HIGHLIGHT_COLOR
        else
            tabHeader.Text = "_« " .. tab.name .. " _"
            tabHeader.TextColor3 = DEFAULT_TEXT_COLOR
        end
        
        tabHeader.TextSize = 16
        tabHeader.TextXAlignment = Enum.TextXAlignment.Left
        tabHeader.Parent = tabFrame
        
        -- Add this tab header to the menu items
        table.insert(self.menuItems, {
            type = "tab",
            tabIndex = tabIndex,
            instance = tabFrame
        })
        
        yOffset = yOffset + 20
        
        -- Add options if tab is expanded
        if tab.expanded then
            for optionIndex, option in ipairs(tab.options) do
                local optionFrame = Instance.new("Frame")
                optionFrame.Name = "OptionFrame_" .. tabIndex .. "_" .. optionIndex
                optionFrame.BackgroundTransparency = 1
                optionFrame.Position = UDim2.new(0, 20, 0, yOffset) -- Indented
                optionFrame.Size = UDim2.new(1, -20, 0, 20)
                optionFrame.ZIndex = 1001
                optionFrame.Parent = self.menuContainer
                
                local optionLabel = Instance.new("TextLabel")
                optionLabel.Name = "OptionLabel"
                optionLabel.BackgroundTransparency = 1
                optionLabel.Size = UDim2.new(0.5, 0, 1, 0)
                optionLabel.Font = Enum.Font.RobotoMono
                optionLabel.ZIndex = 1001
                
                -- Check if this option is selected
                local isSelected = (self.selectedTab == tabIndex and self.selectedOption == optionIndex)
                
                if isSelected then
                    optionLabel.Text = "» " .. option.name
                    optionLabel.TextColor3 = HIGHLIGHT_COLOR
                else
                    optionLabel.Text = option.name
                    optionLabel.TextColor3 = UNSELECTED_COLOR
                end
                
                optionLabel.TextSize = 14
                optionLabel.TextXAlignment = Enum.TextXAlignment.Left
                optionLabel.Parent = optionFrame
                
                local optionValue = Instance.new("TextLabel")
                optionValue.Name = "OptionValue"
                optionValue.BackgroundTransparency = 1
                optionValue.Position = UDim2.new(0.5, 0, 0, 0)
                optionValue.Size = UDim2.new(0.3, 0, 1, 0)
                optionValue.Font = Enum.Font.RobotoMono
                optionValue.Text = option.value
                optionValue.ZIndex = 1001
                
                if isSelected then
                    optionValue.TextColor3 = HIGHLIGHT_COLOR
                else
                    optionValue.TextColor3 = UNSELECTED_COLOR
                end
                
                optionValue.TextSize = 14
                optionValue.TextXAlignment = Enum.TextXAlignment.Left
                optionValue.Parent = optionFrame
                
                -- Add keybind indicator
                local keybindLabel = Instance.new("TextLabel")
                keybindLabel.Name = "KeybindLabel"
                keybindLabel.BackgroundTransparency = 1
                keybindLabel.Position = UDim2.new(0.8, 0, 0, 0)
                keybindLabel.Size = UDim2.new(0.2, 0, 1, 0)
                keybindLabel.Font = Enum.Font.RobotoMono
                keybindLabel.Text = "[" .. option.keybind .. "]"
                keybindLabel.ZIndex = 1001
                
                if isSelected then
                    keybindLabel.TextColor3 = HIGHLIGHT_COLOR
                else
                    keybindLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
                end
                
                keybindLabel.TextSize = 12
                keybindLabel.TextXAlignment = Enum.TextXAlignment.Right
                keybindLabel.Parent = optionFrame
                
                -- Add this option to the menu items
                table.insert(self.menuItems, {
                    type = "option",
                    tabIndex = tabIndex,
                    optionIndex = optionIndex,
                    instance = optionFrame
                })
                
                yOffset = yOffset + 20
            end
        end
    end
    
    -- Update main frame size based on content
    if not self.minimized then
        local newHeight = math.max(yOffset + 30, 60) -- +30 for title area, minimum of 60px
        self.currentHeight = newHeight -- Store the current non-minimized height
        self:AnimateResize(UDim2.new(0, 200, 0, newHeight))
    end
end

-- Toggle tab expansion
function ZyncLib:ToggleTab(tabIndex)
    if self.tabs[tabIndex] then
        self.tabs[tabIndex].expanded = not self.tabs[tabIndex].expanded
        
        -- Find the tab's arrow and animate it
        for _, child in pairs(self.menuContainer:GetChildren()) do
            if child.Name == "TabFrame_" .. tabIndex and child:FindFirstChild("ArrowContainer") then
                local arrow = child.ArrowContainer:FindFirstChild("Arrow")
                if arrow then
                    self:AnimateArrowRotation(arrow, self.tabs[tabIndex].expanded)
                end
            end
        end
        
        -- If tab is collapsed, reset option selection if it was inside this tab
        if not self.tabs[tabIndex].expanded and self.selectedTab == tabIndex and self.selectedOption > 0 then
            self.selectedOption = 0
        end
        
        self:Render()
    end
end

-- Toggle menu visibility
function ZyncLib:ToggleVisibility()
    self.menuEnabled = not self.menuEnabled
    self.mainFrame.Visible = self.menuEnabled
    self.glowContainer.Visible = self.menuEnabled
    
    -- Close keybind dropdown if open
    if self.isKeybindOpen then
        self:CloseKeybindDropdown()
    end
    
    -- Animate glow when showing
    if self.menuEnabled then
        for i, layer in ipairs(self.glowContainer:GetChildren()) do
            layer.BackgroundTransparency = 1
            self:AnimateProperty(layer, {BackgroundTransparency = 0.7 + (i * 0.1)})
        end
    end
end

-- Toggle minimized state
function ZyncLib:ToggleMinimized()
    self.minimized = not self.minimized
    
    -- Close keybind dropdown if open
    if self.isKeybindOpen then
        self:CloseKeybindDropdown()
    end
    
    -- Update glow visibility based on minimized state
    for i, layer in ipairs(self.glowContainer:GetChildren()) do
        if self.minimized then
            self:AnimateProperty(layer, {BackgroundTransparency = 0.9})
        else
            self:AnimateProperty(layer, {BackgroundTransparency = 0.7 + (i * 0.1)})
        end
    end
    
    self:Render()
end

-- Make UI draggable
function ZyncLib:MakeDraggable(dragGui)
    local menuRef = self -- Store reference to self for use in callbacks
    
    local function UpdateDrag(input)
        if menuRef.isDragging and menuRef.dragOffset then
            local newPosition = UDim2.new(
                0, 
                input.Position.X - menuRef.dragOffset.X,
                0, 
                input.Position.Y - menuRef.dragOffset.Y
            )
            menuRef.mainFrame.Position = newPosition
            menuRef.glowContainer.Position = UDim2.new(
                0,
                newPosition.X.Offset - 4,
                0,
                newPosition.Y.Offset - 4
            )
            
            -- Close keybind dropdown if open
            if menuRef.isKeybindOpen then
                menuRef:CloseKeybindDropdown()
            end
        end
    end
    
    dragGui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            menuRef.isDragging = true
            menuRef.dragOffset = Vector2.new(
                input.Position.X - menuRef.mainFrame.AbsolutePosition.X,
                input.Position.Y - menuRef.mainFrame.AbsolutePosition.Y
            )
            
            -- Subtle animation when starting drag
            menuRef:AnimateProperty(menuRef.mainFrame, {BackgroundTransparency = 0.3})
            
            -- Intensify shadow when dragging
            for i, layer in ipairs(menuRef.glowContainer:GetChildren()) do
                menuRef:AnimateProperty(layer, {BackgroundTransparency = 0.6 + (i * 0.08)})
            end
        end
    end)
    
    dragGui.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            menuRef.isDragging = false
            menuRef.dragOffset = nil
            
            -- Restore original transparency
            menuRef:AnimateProperty(menuRef.mainFrame, {BackgroundTransparency = 0.2})
            
            -- Restore original shadow
            for i, layer in ipairs(menuRef.glowContainer:GetChildren()) do
                menuRef:AnimateProperty(layer, {BackgroundTransparency = 0.7 + (i * 0.1)})
            end
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            UpdateDrag(input)
        end
    end)
end

-- Navigate the menu
function ZyncLib:Navigate(direction)
    if not self.menuEnabled or self.minimized then return end
    
    -- Close keybind dropdown if open
    if self.isKeybindOpen then
        self:CloseKeybindDropdown()
        return
    end
    
    local currentIndex = 0
    
    -- Find the current index in menuItems
    for i, item in ipairs(self.menuItems) do
        if item.type == "tab" and item.tabIndex == self.selectedTab and self.selectedOption == 0 then
            currentIndex = i
            break
        elseif item.type == "option" and item.tabIndex == self.selectedTab and item.optionIndex == self.selectedOption then
            currentIndex = i
            break
        end
    end
    
    -- Calculate the new index
    local newIndex = currentIndex + direction
    
    -- Handle wrapping
    if newIndex < 1 then
        newIndex = #self.menuItems
    elseif newIndex > #self.menuItems then
        newIndex = 1
    end
    
    -- Update selection based on new index
    local newItem = self.menuItems[newIndex]
    if newItem then
        if newItem.type == "tab" then
            self.selectedTab = newItem.tabIndex
            self.selectedOption = 0
        else -- option
            self.selectedTab = newItem.tabIndex
            self.selectedOption = newItem.optionIndex
        end
    end
    
    self:Render()
end

-- Cycle option value
function ZyncLib:CycleOptionValue(tabIndex, optionIndex)
    local option = self.tabs[tabIndex].options[optionIndex]
    
    -- Find the current value index
    local currentIndex = 1
    for i, val in ipairs(option.values) do
        if val == option.value then
            currentIndex = i
            break
        end
    end
    
    -- Cycle to next value
    currentIndex = currentIndex % #option.values + 1
    option.value = option.values[currentIndex]
    
    self:Render()
end

-- Open keybind selector
function ZyncLib:OpenKeybindSelector(tabIndex, optionIndex)
    local option = self.tabs[tabIndex].options[optionIndex]
    local optionFrame = nil
    
    -- Find the option frame
    for _, item in ipairs(self.menuItems) do
        if item.type == "option" and item.tabIndex == tabIndex and item.optionIndex == optionIndex then
            optionFrame = item.instance
            break
        end
    end
    
    if optionFrame then
        local absPos = optionFrame.AbsolutePosition
        local position = UDim2.new(0, absPos.X + optionFrame.AbsoluteSize.X - 50, 0, absPos.Y + 25)
        
        self:PopulateKeybindDropdown(tabIndex, optionIndex, position)
    end
end

-- Handle selection
function ZyncLib:Select()
    if not self.menuEnabled or self.minimized then return end
    
    -- If keybind dropdown is open, close it
    if self.isKeybindOpen then
        self:CloseKeybindDropdown()
        return
    end
    
    -- If tab header is selected
    if self.selectedOption == 0 then
        self:ToggleTab(self.selectedTab)
        return
    end
    
    -- If an option is selected
    self:CycleOptionValue(self.selectedTab, self.selectedOption)
end

-- Handle right-click for keybind selection
function ZyncLib:HandleRightClick()
    if not self.menuEnabled or self.minimized or self.selectedOption == 0 then return end
    
    self:OpenKeybindSelector(self.selectedTab, self.selectedOption)
end

-- Start shadow animation
function ZyncLib:StartShadowAnimation()
    local menuRef = self -- Store reference to self for use in the animation loop
    
    spawn(function()
        local pulseAmount = 0.05 -- Max amount to change transparency
        local pulseSpeed = 0.5 -- Speed of the pulse
        local counter = 0
        
        while true do
            counter = counter + 0.05
            local pulseFactor = (math.sin(counter * pulseSpeed) + 1) / 2 * pulseAmount
            
            if menuRef.glowContainer then
                for i, layer in ipairs(menuRef.glowContainer:GetChildren()) do
                    if not menuRef.isDragging and not menuRef.minimized then
                        layer.BackgroundTransparency = 0.7 + (i * 0.1) - pulseFactor
                    end
                end
            end
            
            wait(0.03)
        end
    end)
end

-- Set up input handling
function ZyncLib:SetupInputHandling()
    local menuRef = self -- Store reference to self for use in callbacks
    
    -- Setup title double-click for minimize
    self.titleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            -- Check for double click (less than 0.5 seconds between clicks)
            if menuRef.titleLabel.LastClickTime and tick() - menuRef.titleLabel.LastClickTime < 0.5 then
                menuRef:ToggleMinimized()
                menuRef.titleLabel.LastClickTime = nil
            else
                menuRef.titleLabel.LastClickTime = tick()
            end
        end
    end)
    
    -- Handle keyboard and mouse inputs
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.UserInputType == Enum.UserInputType.MouseButton2 and menuRef.menuEnabled and not menuRef.minimized then
            -- Right-click handling for keybind selection
            menuRef:HandleRightClick()
        elseif input.KeyCode == Enum.KeyCode.Home then
            -- Toggle menu visibility
            menuRef:ToggleVisibility()
        elseif input.KeyCode == Enum.KeyCode.Up then
            -- Move selection up
            menuRef:Navigate(-1)
        elseif input.KeyCode == Enum.KeyCode.Down then
            -- Move selection down
            menuRef:Navigate(1)
        elseif input.KeyCode == Enum.KeyCode.Return then
            -- Select current option
            menuRef:Select()
        end
        
        -- Check for keybind press
        if menuRef.menuEnabled then
            for tabIndex, tab in ipairs(menuRef.tabs) do
                for optionIndex, option in ipairs(tab.options) do
                    local keyName = string.upper(option.keybind or "")
                    if keyName ~= "" then
                        local keyCode = Enum.KeyCode[keyName]
                        if keyCode and input.KeyCode == keyCode then
                            menuRef:CycleOptionValue(tabIndex, optionIndex)
                        end
                    end
                end
            end
        end
    end)
    
    -- Mouse wheel scrolling
    UserInputService.InputChanged:Connect(function(input, gameProcessed)
        if gameProcessed or not menuRef.menuEnabled or menuRef.minimized then return end
        
        if input.UserInputType == Enum.UserInputType.MouseWheel then
            if input.Position.Z > 0 then
                -- Scroll up
                menuRef:Navigate(-1)
            else
                -- Scroll down
                menuRef:Navigate(1)
            end
        end
    end)
end

return ZyncLib
